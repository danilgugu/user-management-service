openapi: 3.0.3
info:
  title: User Management Service
  description: RESTful User Management Service with Token-Based Authorization, Dockerized PostgreSQL Database, Setup Scripts, Spring Boot, Spring Cache and Login Endpoint
  version: 1.0.0
servers:
  - url: /api
tags:
  - name: users
    description: Users operations
paths:
  /users:
    get:
      summary: List of all users in the system
      operationId: getUsers
      tags:
        - users
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: invalid limit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
    post:
      summary: Create new user
      operationId: createUser
      tags:
        - users
      requestBody:
        description: Information about user to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserCommand'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{id}:
    get:
      summary: Returns details of a specific user by their ID
      operationId: getUser
      tags:
        - users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '404':
          description: user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
    put:
      summary: Updates the details of a specific user
      operationId: updateUser
      tags:
        - users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Information about user to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserCommand'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '404':
          description: user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
    delete:
      summary: Removes a user from the system
      operationId: deleteUser
      tags:
        - users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        userName:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
      required:
        - id
        - userName
        - email
    CreateUserCommand:
      type: object
      properties:
        userName:
          type: string
        email:
          type: string
          format: email
      required:
        - userName
        - email
    UpdateUserCommand:
      type: object
      properties:
        userName:
          type: string
        email:
          type: string
          pattern: email

    ErrorDto:
      type: object
      properties:
        message:
          type: string
        time:
          type: string
